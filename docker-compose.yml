version: '3'

services:
  db:
    image: mysql:latest
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: flask
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin123
        #    ports:
        #      - "3306:3306"
    volumes:
      #       - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./db:/docker-entrypoint-initdb.d/:ro
    networks:
      - flask_network

  nginx_loadbalancer:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/certs/certificate.pem:/etc/nginx/certs/certificate.pem
      - ./nginx/certs/private-key.pem:/etc/nginx/certs/private-key.pem
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd
    restart: unless-stopped
    networks:
      - flask_network
    depends_on:
      - app1
      - app2

  app1:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      # DATABASE_URL: mysql://admin:admin123@db/flask
      DATABASE_URI: 'mysql+pymysql://admin:admin123@mysql:3306/flask'
        #    container_name: flask
    restart: unless-stopped
    networks:
      - flask_network
    depends_on:
      - db
      - redis

  app2:
    build: .
    environment:
      # DATABASE_URL: mysql://admin:admin123@db/flask
      DATABASE_URI: 'mysql+pymysql://admin:admin123@mysql:3306/flask'
        #    container_name: flask
    restart: unless-stopped
    networks:
      - flask_network
    depends_on:
      - db
      - redis

  redis:
    image: redis:latest
    restart: unless-stopped
    container_name: redis
    networks:
      - flask_network

networks:
    flask_network:
      external: true